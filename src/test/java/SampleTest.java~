import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import tn.esprit.tpfoyer.control.BlocRestController;
import tn.esprit.tpfoyer.entity.Bloc;
import tn.esprit.tpfoyer.entity.Chambre;
import tn.esprit.tpfoyer.entity.Foyer;
import tn.esprit.tpfoyer.service.IBlocService;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.Mockito.when;

@WebMvcTest(BlocRestController.class)
public class SampleTest {
    @Mock
    private IBlocService blocService;

    @InjectMocks
    private BlocRestController blocRestController;
    @Autowired
    private MockMvc mockMvc;

    @BeforeEach
    public void setUp() {
        mockMvc = MockMvcBuilders.standaloneSetup(blocRestController).build();
    }

    @Test
    void testGetBlocs() throws Exception {
        Foyer foyer = new Foyer(1L, "Foyer A", "1234 Main Street");
        Chambre chambre1 = new Chambre(1L, "Chambre A", 2, new Bloc(), foyer);
        Chambre chambre2 = new Chambre(2L, "Chambre B", 3, new Bloc(), foyer);
        Set<Chambre> chambres = new HashSet<>(Arrays.asList(chambre1, chambre2));

        Bloc bloc1 = new Bloc(1L, "Bloc A", 100, foyer, chambres);
        Bloc bloc2 = new Bloc(2L, "Bloc B", 150, foyer, chambres);

        List<Bloc> blocs = Arrays.asList(bloc1, bloc2);
        when(blocService.retrieveAllBlocs()).thenReturn(blocs);

        mockMvc.perform(get("/bloc/retrieve-all-blocs"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].idBloc").value(1))
                .andExpect(jsonPath("$[1].idBloc").value(2))
                .andExpect(jsonPath("$[0].nomBloc").value("Bloc A"))
                .andExpect(jsonPath("$[1].nomBloc").value("Bloc B"));
    }

    @Test
    void testRetrieveBloc() throws Exception {
        Foyer foyer = new Foyer(1L, "Foyer A", "1234 Main Street");
        Chambre chambre1 = new Chambre(1L, "Chambre A", 2, new Bloc(), foyer);
        Set<Chambre> chambres = new HashSet<>();
        chambres.add(chambre1);

        Bloc bloc = new Bloc(1L, "Bloc A", 100, foyer, chambres);
        when(blocService.retrieveBloc(1L)).thenReturn(bloc);

        mockMvc.perform(get("/bloc/retrieve-bloc/1"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.idBloc").value(1))
                .andExpect(jsonPath("$.nomBloc").value("Bloc A"))
                .andExpect(jsonPath("$.foyer.nomFoyer").value("Foyer A"));
    }

    @Test
    void testAddBloc() throws Exception {
        Foyer foyer = new Foyer(1L, "Foyer A", "1234 Main Street");
        Chambre chambre1 = new Chambre(1L, "Chambre A", 2, new Bloc(), foyer);
        Set<Chambre> chambres = new HashSet<>();
        chambres.add(chambre1);

        Bloc bloc = new Bloc(1L, "Bloc A", 100, foyer, chambres);
        when(blocService.addBloc(any(Bloc.class))).thenReturn(bloc);

        mockMvc.perform(post("/bloc/add-bloc")
                        .contentType("application/json")
                        .content(new ObjectMapper().writeValueAsString(bloc)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.idBloc").value(1))
                .andExpect(jsonPath("$.nomBloc").value("Bloc A"));
    }

    @Test
    void testRemoveBloc() throws Exception {
        doNothing().when(blocService).removeBloc(1L);

        mockMvc.perform(delete("/bloc/remove-bloc/1"))
                .andExpect(status().isNoContent());
    }

    @Test
    void testModifyBloc() throws Exception {
        Foyer foyer = new Foyer(1L, "Updated Foyer", "5678 New Street");
        Chambre chambre1 = new Chambre(1L, "Chambre A", 2, new Bloc(), foyer);
        Set<Chambre> chambres = new HashSet<>();
        chambres.add(chambre1);

        Bloc updatedBloc = new Bloc(1L, "Updated Bloc", 120, foyer, chambres);
        when(blocService.modifyBloc(any(Bloc.class))).thenReturn(updatedBloc);

        mockMvc.perform(put("/bloc/modify-bloc")
                        .contentType("application/json")
                        .content(new ObjectMapper().writeValueAsString(updatedBloc)))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$.nomBloc").value("Updated Bloc"));
    }

    @Test
    void testGetBlocswirhoutFoyer() throws Exception {
        Foyer foyer = new Foyer(1L, "Foyer A", "1234 Main Street");
        Set<Chambre> chambres = new HashSet<>();
        Bloc bloc = new Bloc(1L, "Bloc A", 100, foyer, chambres);

        List<Bloc> blocs = Arrays.asList(bloc);
        when(blocService.trouverBlocsSansFoyer()).thenReturn(blocs);

        mockMvc.perform(get("/bloc/trouver-blocs-sans-foyer"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].nomBloc").value("Bloc A"))
                .andExpect(jsonPath("$[0].foyer").isEmpty());
    }

    @Test
    void testRecuperBlocsParNomEtCap() throws Exception {
        Foyer foyer = new Foyer(1L, "Foyer A", "1234 Main Street");
        Set<Chambre> chambres = new HashSet<>();
        Bloc bloc = new Bloc(1L, "Bloc A", 100, foyer, chambres);

        List<Bloc> blocs = Arrays.asList(bloc);
        when(blocService.trouverBlocsParNomEtCap("Bloc A", 100)).thenReturn(blocs);

        mockMvc.perform(get("/bloc/get-bloc-nb-c/Bloc A/100"))
                .andExpect(status().isOk())
                .andExpect(jsonPath("$[0].nomBloc").value("Bloc A"));
    }
}
